from pulp import LpMaximize, LpMinimize, LpProblem, LpVariable, PULP_CBC_CMD
import sys
import re

def simplex_solver(obj_func, constraints, problem_type):
    """
    Resolve problemas de programa√ß√£o linear e retorna as itera√ß√µes do m√©todo Simplex.
    Exibe os valores das vari√°veis durante as itera√ß√µes e o valor final da fun√ß√£o objetivo Z.

    :param obj_func: String da fun√ß√£o objetivo (exemplo: "24*x1 + 22*x2 + 45*x3").
    :param constraints: Lista de strings das restri√ß√µes (exemplo: ["2*x1 + 1*x2 + 3*x3 <= 42"]).
    :param problem_type: Tipo do problema, "max" para maximizar ou "min" para minimizar.
    :param msg: Serve para retornar mais detalhes do m√©todo se True.
    :return: Lista de itera√ß√µes do solver, valores das vari√°veis finais e valor final de Z.
    """
    if problem_type == "max":
        model = LpProblem(name="simplex_solver", sense=LpMaximize)
    elif problem_type == "min":
        model = LpProblem(name="simplex_solver", sense=LpMinimize)
    else:
        raise ValueError("O tipo do problema deve ser 'max' ou 'min'.")

    variables = sorted(set(re.findall(r"x\d+", obj_func)))

    var_dict = {var: LpVariable(name=var, lowBound=0) for var in variables}

    model += eval(obj_func, None, var_dict), "Fun√ß√£o Objetivo"

    for i, constraint in enumerate(constraints):
        model += eval(constraint, None, var_dict), f"Restri√ß√£o_{i + 1}"

    solver = PULP_CBC_CMD(msg=False)
    model.solve(solver)
    sys.stdout = sys.__stdout__

    final_values = {var: var_dict[var].varValue for var in variables}

    final_z = model.objective.value()

    return final_values, final_z, model


# Dados Questao 1
obj_func = "24*x1 + 22*x2 + 45*x3"
constraints = [
    "2*x1 + 1*x2 + 3*x3 <= 42",
    "2*x1 + 1*x2 + 2*x3 <= 40",
    "1*x1 + 0.5*x2 + 1*x3 <= 45"
]

final_values, final_z, model = simplex_solver(obj_func, constraints, problem_type="max")

# Exibir resultado final
a = input(f"Pressione enter para ver o resultado da Primeira Quest√£o")
print("\nResultado final das vari√°veis de decis√£o da Primeira Quest√£o:")
for var, value in final_values.items():
    print(f"{var}: {value}")

# Exibir valor final da fun√ß√£o objetivo Z
print(f"\nüîπ Valor final da fun√ß√£o objetivo (Z): {final_z}")

#Questao 2
obj_func_question_2 = ["2*x1 + 3*x2 - 5*x3","2*x1 + 3*x2 - 5*x3","1*x1 + 2*x2 + 1*x3","4*x1 - 8*x2 + 3*x3"]
constraints = [
    "1*x1 + 1*x2 + 1*x3 == 7",
    "2*x1 - 5*x2 + 1*x3 >= 10",
]
ordem_itens_max_min = ["max", "min", "max", "min"]
itens= ["a","b","c","d"]

for i, value in enumerate(obj_func_question_2):

    final_values, final_z, model = simplex_solver(value, constraints, ordem_itens_max_min[i])

    # Exibir resultado final
    a = input(f"Pressione enter para ver o resultado da Segunda Quest√£o item {itens[i]}")
    print(f"\nResultado final das vari√°veis de decis√£o a Segunda Quest√£o item {itens[i]}: ")
    for var, value in final_values.items():
        print(f"{var}: {value}")

    # Exibir valor final da fun√ß√£o objetivo Z
    print(f"\nüîπ Valor final da fun√ß√£o objetivo (Z): {final_z}")

"""
Modelo Quest√£o 3:
Z=8x1+5x2
Restri√ß√µes:
2x1+x2‚â§400,
x1‚â§150,
x2‚â§200
"""

obj_func_question_3 = "8*x1 + 5*x2"
ordem = "max"
constraints = [
    "2*x1 + 1*x2 <= 400",
    "1*x1 <= 150",
    "1*x2 <= 200"
]
a = input(f"Pressione enter para ver o resultado da Terceira Quest√£o")
final_values, final_z, model = simplex_solver(obj_func_question_3, constraints, problem_type=ordem)
# Exibir resultado final
print("\nResultado final das vari√°veis de decis√£o Terceira Quest√£o:")
for var, value in enumerate(final_values):
    print(f"Solu√ß√£o √≥tima do Chap√©u tipo {var+1}: {final_values[value]}")

# Exibir valor final da fun√ß√£o objetivo Z
print(f"\nüîπ Valor final da fun√ß√£o objetivo (Z): {final_z}")

a = input("Pressione enter para o item b: ")

print("\nPre√ßos duais:")
for name, constraint in model.constraints.items():
    if name == "Restri√ß√£o_3":
        print(f"Acr√©scimo/Decr√©scimo do pre√ßo dual da {name} (chap√©u tipo 2): {constraint.pi} (faixa aplic√°vel: {constraint.slack})")

print("\n\n")
#Na terceira quest√£o, o novo limite √© 120, mas dou a op√ß√£o para o usu√°rio passar um novo limite e o algoritmo verifica se √© necess√°rio fazer um novo modelo
a = (input("Pressione enter para o item c, passando como par√¢metro a nova restri√ß√£o na qnt de chap√©us do tipo 1 (por padr√£o da quest√£o √© 120): "))
if a == "":
    a = 120
else:
    a = int(a)
#150 √© o limite de x1 anteriormente
variavel_restricao = 150 - a

for name, constraint in model.constraints.items():
    if name == "Restri√ß√£o_2":
        if variavel_restricao <= constraint.slack:
            print(f"O novo limite de valor de {a} na restri√ß√£o 2 n√£o exige que recalcule o simplex")
            print(f"O novo valor de z √© definido atrav√©s do pre√ßo dual dessa restri√ß√£o, que para cada unidade √© de: {constraint.pi}, logo {constraint.pi} x {variavel_restricao} = {constraint.pi*variavel_restricao} e o novo z ser√°: {final_z + constraint.pi*variavel_restricao}")
        else:
            print("√â necess√°rio recalcular o simplex, superou a faixa aplic√°vel")


print("\n\n")
a = (input("Pressione enter para o item d: "))

for name, constraint in model.constraints.items():
    if name == "Restri√ß√£o_3":
        print(f"O pre√ßo dual da participa√ß√£o de mercado do chap√©u tipo 2 √©: {constraint.pi}, ou seja, z aumente em 1 se a restri√ß√£o 3 aumentar em um, desde que as outras restri√ß√µes tamb√©m sejam v√°lidas")
        print("A participa√ß√£o de mercado do chap√©u tipo 2 pode ser aumentada at√© o limite da faixa aplic√°vel do pre√ßo dual da restri√ß√£o, mantendo o valor equivalente por unidade. No seu caso, a faixa aplic√°vel √© -0.0.")
        print("Isso significa que n√£o h√° uma varia√ß√£o significativa permitida para aumentar a participa√ß√£o de mercado, j√° que a faixa aplic√°vel n√£o permite uma mudan√ßa. Portanto, a participa√ß√£o de mercado n√£o pode ser aumentada de forma mensur√°vel sem afetar a restri√ß√£o e a fun√ß√£o objetivo.")